<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!--
    
    EMULAB-COPYRIGHT
    Copyright (c) 2005-2007 University of Utah and the Flux Group.
    All rights reserved.
    
  -->
  <!--
    
    Definition of common data structures used for representing topologies -
    shared between vtop (virtual topology) and ptop (physical topology)
    formats.
    
  -->
  <define name="NodeTypeSpec">
    <a:documentation>Representation of a single node type</a:documentation>
    <element name="node_type">
      <interleave>
        <attribute name="type_name">
          <a:documentation>Name of the type - will almost certainly not be unique</a:documentation>
        </attribute>
        <attribute name="type_slots">
          <a:documentation>How many virtual nodes of this type this physical node can
handle.</a:documentation>
          <choice>
            <data type="integer">
              <param name="minInclusive">0</param>
            </data>
            <value>unlimited</value>
          </choice>
        </attribute>
        <optional>
          <attribute name="static">
            <a:documentation>element unlimited { empty }?,
A flag that indicates that this physical node *always*
has this type - a node is only allowed to have one dynamic
(ie. not flagged as static) type at a time, but any number
of static types at a time
element static { empty }?</a:documentation>
            <value>true</value>
          </attribute>
        </optional>
        <ref name="NodeTypeContents"/>
      </interleave>
    </element>
  </define>
  <define name="NodeTypeContents">
    <empty/>
  </define>
  <define name="LinkTypeSpec">
    <a:documentation>Link types are currently just a siple string. They will almost certainly 
have to get more complicated, for two reasons:
    First, I want to allow virtual links to specify more than one type, so
      that we can ask for links that are, say, 'ethernet or loopback'
    Second, I want to have a lot more control over links that get mapped to
      multi-hop paths
TODO: MAYBE this should be combined with NodeTypeSpec</a:documentation>
    <element name="link_type">
      <attribute name="type_name"/>
    </element>
  </define>
  <define name="LinkEndPoints">
    <a:documentation>A link has two endpoints. Right now, they are order
independent. But they might become order-dependant later.</a:documentation>
    <element name="source_interface">
      <a:documentation>First interface for this link</a:documentation>
      <ref name="InterfaceSpec"/>
    </element>
    <element name="destination_interface">
      <a:documentation>Second interface for this link</a:documentation>
      <ref name="InterfaceSpec"/>
    </element>
  </define>
  <define name="LinkCharacteristics">
    <a:documentation>Link characterstics which affect traffic.
TODO: In the future, the bandwidth, latency, and packet loss will be
moved to features and/or properties</a:documentation>
    <element name="bandwidth">
      <a:documentation>Bandwidth of the link in kbps</a:documentation>
      <data type="float">
        <param name="minExclusive">0.0</param>
      </data>
    </element>
    <element name="latency">
      <a:documentation>Latency of the link in ms</a:documentation>
      <data type="float">
        <param name="minInclusive">0.0</param>
      </data>
    </element>
    <element name="packet_loss">
      <a:documentation>Static packet loss probability of the link as a fraction
(ie. 0.01 == 1%)</a:documentation>
      <data type="float">
        <param name="minInclusive">0.0</param>
      </data>
    </element>
  </define>
  <define name="FeatureDesireSpec">
    <a:documentation>"Legacy" assign features and desires - will be phased out in favor of
properties</a:documentation>
    <element name="fd">
      <attribute name="fd_name">
        <a:documentation>Name of this feature or desire
element fd_name { text },</a:documentation>
      </attribute>
      <attribute name="fd_weight">
        <a:documentation>Weight assocated with the feature or desire
element fd_weight { xsd:float },</a:documentation>
      </attribute>
      <optional>
        <attribute name="violatable">
          <a:documentation>A flag indicating whether or not a failure to match the desire with a
a feature is a constraint violation
element violatable { empty }?,</a:documentation>
          <value>true</value>
        </attribute>
      </optional>
      <optional>
        <choice>
          <a:documentation>Type information expressed in features and desires</a:documentation>
          <ref name="GlobalSpec"/>
          <ref name="LocalSpec"/>
        </choice>
      </optional>
    </element>
  </define>
  <define name="GlobalSpec">
    <a:documentation>GlobalSpec = element global {
	element operator { "OnceOnly" | "FirstFree" }
}</a:documentation>
    <attribute name="global_operator">
      <choice>
        <value>OnceOnly</value>
        <value>FirstFree</value>
      </choice>
    </attribute>
  </define>
  <define name="LocalSpec">
    <a:documentation>LocalSpec = element local {
	element operator { "+" }
	attribute local_operator { "+" }
}</a:documentation>
    <attribute name="local_operator">
      <value>+</value>
    </attribute>
  </define>
  <define name="InterfaceSpec">
    <a:documentation>Interfaces
InterfaceSpec = element interface { InterfaceContents }</a:documentation>
    <attribute name="node_name"/>
    <attribute name="interface_name"/>
    <optional>
      <attribute name="physical_node_name"/>
    </optional>
    <optional>
      <attribute name="physical_interface_name"/>
    </optional>
    <zeroOrMore>
      <ref name="PropertySpec"/>
    </zeroOrMore>
  </define>
  <define name="InterfaceContents">
    <element name="node_name">
      <a:documentation>Name of the node, which must match one of the nodes in this topology</a:documentation>
      <text/>
    </element>
    <element name="interface_name">
      <a:documentation>Name of the interface itself</a:documentation>
      <text/>
    </element>
    <zeroOrMore>
      <ref name="PropertySpec">
        <a:documentation>Properties of the interface</a:documentation>
      </ref>
    </zeroOrMore>
  </define>
  <define name="PropertySpec">
    <a:documentation>Properties - new: replacements for features and desires. Not yet implemented
in assign, and not yet fully fleshed out in this schema.</a:documentation>
    <element name="property">
      <element name="property_name">
        <a:documentation>Name of this property</a:documentation>
        <text/>
      </element>
      <element name="property_value">
        <a:documentation>Value associated with this property
TODO: Add ranges and other types from rspec</a:documentation>
        <choice>
          <text/>
          <data type="float"/>
        </choice>
      </element>
      <element name="property_penalty">
        <a:documentation>The penalty associated with this property</a:documentation>
        <data type="float">
          <param name="minInclusive">0.0</param>
        </data>
      </element>
      <optional>
        <element name="violatable">
          <a:documentation>If this flag is present, not having the property is considered a violation</a:documentation>
          <empty/>
        </element>
      </optional>
      <optional>
        <choice>
          <a:documentation>TODO: Add more operators - equality, range test, etc
Flags for special types of operators</a:documentation>
          <ref name="GlobalSpec"/>
          <ref name="LocalSpec"/>
        </choice>
      </optional>
    </element>
  </define>
</grammar>
